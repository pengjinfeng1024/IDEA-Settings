<application>
  <component name="DBGenerateSettings">
    <option name="dbTemplateGroupList">
      <list>
        <DBTemplateGroup>
          <option name="dbTemplateList">
            <list>
              <DBTemplateConf>
                <option name="defaultModuleName" value="dal" />
                <option name="defaultTemplate" value="### entity 生成&#10;package #(te.getStr(&quot;DOPackage&quot;));&#10;&#10;#for(importClass : columnJavaTypeImportList)&#10;import #(importClass);&#10;#end&#10;import java.io.Serializable;&#10;&#10;/**&#10; * #(tableInfo.comment)&#10; */&#10;public class #(te.getStr(&quot;DOFileName&quot;)) implements Serializable {&#10;    private static final long serialVersionUID = #(SerialUIDUtil.serial());&#10;&#10;### 生成字段属性&#10;#for(column : columns)&#10;    /**&#10;     * #(column.comment)&#10;     */&#10;    private #(column.javaShorType) #(column.camelName);&#10;&#10;#end&#10;### 生成SetGet方法&#10;#for(column : columns)&#10;    public #(column.javaShorType) get#(column.camelNameFirstUpper)() {&#10;        return #(column.camelName);&#10;    }&#10;&#10;    public void set#(column.camelNameFirstUpper)(#(column.javaShorType) #(column.camelName)) {&#10;        this.#(column.camelName) = #(column.camelName);&#10;    }&#10;&#10;#end&#10;}&#10;" />
                <option name="id" value="1" />
                <option name="name" value="DO" />
                <option name="selected" value="true" />
                <option name="suffix" value=".java" />
                <option name="template" value="### entity 生成&#10;package #(te.getStr(&quot;DOPackage&quot;));&#10;&#10;#for(importClass : columnJavaTypeImportList)&#10;import #(importClass);&#10;#end&#10;import java.io.Serializable;&#10;&#10;/**&#10; * #(tableInfo.comment)&#10; */&#10;public class #(te.getStr(&quot;DOFileName&quot;)) implements Serializable {&#10;    private static final long serialVersionUID = #(SerialUIDUtil.serial());&#10;&#10;### 生成字段属性&#10;#for(column : columns)&#10;    /**&#10;     * #(column.comment)&#10;     */&#10;    private #(column.javaShorType) #(column.camelName);&#10;&#10;#end&#10;### 生成SetGet方法&#10;#for(column : columns)&#10;    public #(column.javaShorType) get#(column.camelNameFirstUpper)() {&#10;        return #(column.camelName);&#10;    }&#10;&#10;    public void set#(column.camelNameFirstUpper)(#(column.javaShorType) #(column.camelName)) {&#10;        this.#(column.camelName) = #(column.camelName);&#10;    }&#10;&#10;#end&#10;}&#10;" />
              </DBTemplateConf>
              <DBTemplateConf>
                <option name="defaultModuleName" value="dal" />
                <option name="defaultTemplate" value="### mapper文件生成&#10;#set(camelNameUpper = te.getStr(&quot;upperFirstCamelName&quot;))&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;#set(daoQualifiedName = te.getStr(&quot;DAOPackageQN&quot;))&#10;#set(resultMapID = camelNameUpper + &quot;Map&quot;)&#10;#set(primaryKeyCamel = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(primaryKey = te.getStr(&quot;primaryKey&quot;))&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;#(daoQualifiedName)&quot;&gt;&#10;&#10;### 生成映射文件&#10;    &lt;resultMap type=&quot;#(entityQualifiedName)&quot; id=&quot;#(resultMapID)&quot;&gt;&#10;#for(column : columns)&#10;        &lt;result property=&quot;#(column.camelName)&quot; column=&quot;#(column.columnName)&quot; jdbcType=&quot;#(column.jdbcType)&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;### 根据ID查询&#10;#for(column : columns)&#10;   #if(column.primaryKey)&#10;    &lt;!--查询单个--&gt;&#10;    &lt;select id=&quot;queryById&quot; resultMap=&quot;#(resultMapID)&quot;&gt;&#10;        select&#10;          #(allColumnsName)&#10;        from #(tableInfo.name)&#10;        where #(column.columnName) = #{#(column.camelName)}&#10;    &lt;/select&gt;&#10;   #break&#10;   #end&#10;#end&#10;&#10;###  查询指定行数据&#10;    &lt;!--查询指定行数据--&gt;&#10;    &lt;select id=&quot;queryAllByLimit&quot; resultMap=&quot;#(resultMapID)&quot;&gt;&#10;        select&#10;          #(allColumnsName)&#10;        from #(tableInfo.name)&#10;        &lt;where&gt;&#10;#for(column : columns)&#10;            &lt;if test=&quot;#(column.camelName) != null&quot;&gt;&#10;                and #(column.columnName) = #{#(column.camelName)}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;        limit #{pageable.offset}, #{pageable.pageSize}&#10;    &lt;/select&gt;&#10;&#10;### 统计总行数&#10;    &lt;!--统计总行数--&gt;&#10;    &lt;select id=&quot;count&quot; resultType=&quot;java.lang.Long&quot;&gt;&#10;        select count(1)&#10;        from #(tableInfo.name)&#10;        &lt;where&gt;&#10;#for(column : columns)&#10;            &lt;if test=&quot;#(column.camelName) != null and #(column.camelName) != ''&quot;&gt;&#10;                and #(column.columnName) = #{#(column.camelName)}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;        limit #{pageable.offset}, #{pageable.pageSize}&#10;    &lt;/select&gt;&#10;&#10;### 新增所有列  此处主键默认不添加进去&#10;    &lt;!--新增所有列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;#(primaryKeyCamel)&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into #(tableInfo.name)(#(allColumnsNameNoPrimary))&#10;        values (#for(column : columns)#if(!column.primaryKey)#{#(column.camelName)}#if(!for.last), #end#end#end)&#10;    &lt;/insert&gt;&#10;&#10;### 批量插入&#10;    &lt;!--批量插入--&gt;&#10;    &lt;insert id=&quot;insertBatch&quot; keyProperty=&quot;#(primaryKeyCamel)&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into #(tableInfo.name)(#(allColumnsNameNoPrimary))&#10;        values&#10;        &lt;foreach collection=&quot;entities&quot; item=&quot;entity&quot; separator=&quot;,&quot;&gt;&#10;        (#for(column : columns)#if(!column.primaryKey)#{entity.#(column.camelName)}#if(!for.last), #end#end#end)&#10;        &lt;/foreach&gt;&#10;    &lt;/insert&gt;&#10;&#10;### 批量更新或插入&#10;    &lt;insert id=&quot;insertOrUpdateBatch&quot; keyProperty=&quot;#(primaryKeyCamel)&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into #(tableInfo.name)(#(allColumnsNameNoPrimary))&#10;        values&#10;        &lt;foreach collection=&quot;entities&quot; item=&quot;entity&quot; separator=&quot;,&quot;&gt;&#10;        (#for(column : columns)#if(!column.primaryKey)#{entity.#(column.camelName)}#if(!for.last), #end#end#end)&#10;        &lt;/foreach&gt;&#10;        on duplicate key update&#10;#for(column : columns)&#10;    #if(!column.primaryKey)&#10;        #(column.columnName) = values(#(column.columnName)),&#10;    #end&#10;#end&#10;    &lt;/insert&gt;&#10;&#10;### 通过主键修改数据&#10;    &lt;!--通过主键修改数据--&gt;&#10;    &lt;update id=&quot;update&quot;&gt;&#10;        update #(tableInfo.name)&#10;        &lt;set&gt;&#10;#for(column : columns)&#10;    #if(!column.primaryKey)&#10;            &lt;if test=&quot;#(column.camelName) != null and #(column.camelName) != ''&quot;&gt;&#10;                #(column.columnName) = #{#(column.camelName)},&#10;            &lt;/if&gt;&#10;    #end&#10;#end&#10;        &lt;/set&gt;&#10;        where #(primaryKey) = #{#(primaryKeyCamel)}&#10;    &lt;/update&gt;&#10;&#10;### 通过主键删除&#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot;&gt;&#10;        delete from #(tableInfo.name) where #(primaryKey) = #{#(primaryKeyCamel)}&#10;    &lt;/delete&gt;&#10;&lt;/mapper&gt;&#10;&#10;" />
                <option name="id" value="2" />
                <option name="name" value="mapper" />
                <option name="resourceFile" value="true" />
                <option name="selected" value="true" />
                <option name="suffix" value=".xml" />
                <option name="template" value="### mapper文件生成&#10;#set(camelNameUpper = te.getStr(&quot;upperFirstCamelName&quot;))&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;#set(daoQualifiedName = te.getStr(&quot;DAOPackageQN&quot;))&#10;#set(resultMapID = camelNameUpper + &quot;Map&quot;)&#10;#set(primaryKeyCamel = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(primaryKey = te.getStr(&quot;primaryKey&quot;))&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;#(daoQualifiedName)&quot;&gt;&#10;&#10;### 生成映射文件&#10;    &lt;resultMap type=&quot;#(entityQualifiedName)&quot; id=&quot;#(resultMapID)&quot;&gt;&#10;#for(column : columns)&#10;        &lt;result property=&quot;#(column.camelName)&quot; column=&quot;#(column.columnName)&quot; jdbcType=&quot;#(column.jdbcType)&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;### 根据ID查询&#10;#for(column : columns)&#10;   #if(column.primaryKey)&#10;    &lt;!--查询单个--&gt;&#10;    &lt;select id=&quot;queryById&quot; resultMap=&quot;#(resultMapID)&quot;&gt;&#10;        select&#10;          #(allColumnsName)&#10;        from #(tableInfo.name)&#10;        where #(column.columnName) = #{#(column.camelName)}&#10;    &lt;/select&gt;&#10;   #break&#10;   #end&#10;#end&#10;&#10;###  查询指定行数据&#10;    &lt;!--查询指定行数据--&gt;&#10;    &lt;select id=&quot;queryAllByLimit&quot; resultMap=&quot;#(resultMapID)&quot;&gt;&#10;        select&#10;          #(allColumnsName)&#10;        from #(tableInfo.name)&#10;        &lt;where&gt;&#10;#for(column : columns)&#10;            &lt;if test=&quot;#(column.camelName) != null&quot;&gt;&#10;                and #(column.columnName) = #{#(column.camelName)}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;        limit #{pageable.offset}, #{pageable.pageSize}&#10;    &lt;/select&gt;&#10;&#10;### 统计总行数&#10;    &lt;!--统计总行数--&gt;&#10;    &lt;select id=&quot;count&quot; resultType=&quot;java.lang.Long&quot;&gt;&#10;        select count(1)&#10;        from #(tableInfo.name)&#10;        &lt;where&gt;&#10;#for(column : columns)&#10;            &lt;if test=&quot;#(column.camelName) != null and #(column.camelName) != ''&quot;&gt;&#10;                and #(column.columnName) = #{#(column.camelName)}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;        limit #{pageable.offset}, #{pageable.pageSize}&#10;    &lt;/select&gt;&#10;&#10;### 新增所有列  此处主键默认不添加进去&#10;    &lt;!--新增所有列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;#(primaryKeyCamel)&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into #(tableInfo.name)(#(allColumnsNameNoPrimary))&#10;        values (#for(column : columns)#if(!column.primaryKey)#{#(column.camelName)}#if(!for.last), #end#end#end)&#10;    &lt;/insert&gt;&#10;&#10;### 批量插入&#10;    &lt;!--批量插入--&gt;&#10;    &lt;insert id=&quot;insertBatch&quot; keyProperty=&quot;#(primaryKeyCamel)&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into #(tableInfo.name)(#(allColumnsNameNoPrimary))&#10;        values&#10;        &lt;foreach collection=&quot;entities&quot; item=&quot;entity&quot; separator=&quot;,&quot;&gt;&#10;        (#for(column : columns)#if(!column.primaryKey)#{entity.#(column.camelName)}#if(!for.last), #end#end#end)&#10;        &lt;/foreach&gt;&#10;    &lt;/insert&gt;&#10;&#10;### 批量更新或插入&#10;    &lt;insert id=&quot;insertOrUpdateBatch&quot; keyProperty=&quot;#(primaryKeyCamel)&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into #(tableInfo.name)(#(allColumnsNameNoPrimary))&#10;        values&#10;        &lt;foreach collection=&quot;entities&quot; item=&quot;entity&quot; separator=&quot;,&quot;&gt;&#10;        (#for(column : columns)#if(!column.primaryKey)#{entity.#(column.camelName)}#if(!for.last), #end#end#end)&#10;        &lt;/foreach&gt;&#10;        on duplicate key update&#10;#for(column : columns)&#10;    #if(!column.primaryKey)&#10;        #(column.columnName) = values(#(column.columnName)),&#10;    #end&#10;#end&#10;    &lt;/insert&gt;&#10;&#10;### 通过主键修改数据&#10;    &lt;!--通过主键修改数据--&gt;&#10;    &lt;update id=&quot;update&quot;&gt;&#10;        update #(tableInfo.name)&#10;        &lt;set&gt;&#10;#for(column : columns)&#10;    #if(!column.primaryKey)&#10;            &lt;if test=&quot;#(column.camelName) != null and #(column.camelName) != ''&quot;&gt;&#10;                #(column.columnName) = #{#(column.camelName)},&#10;            &lt;/if&gt;&#10;    #end&#10;#end&#10;        &lt;/set&gt;&#10;        where #(primaryKey) = #{#(primaryKeyCamel)}&#10;    &lt;/update&gt;&#10;&#10;### 通过主键删除&#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot;&gt;&#10;        delete from #(tableInfo.name) where #(primaryKey) = #{#(primaryKeyCamel)}&#10;    &lt;/delete&gt;&#10;&lt;/mapper&gt;&#10;&#10;" />
              </DBTemplateConf>
              <DBTemplateConf>
                <option name="defaultModuleName" value="dal" />
                <option name="defaultTemplate" value="### 生成Dao层代码&#10;#set(entityName = te.getStr(&quot;DOFileName&quot;))&#10;#set(entityLowerName = StrUtil.lowerFirst(entityName))&#10;#set(id = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;### 引用包路径名称&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;### 主键相关&#10;#set(primaryKeyCamelName = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(primaryKeyShortType = te.getStr(&quot;primaryKeyShortType&quot;))&#10;package #(te.getStr(&quot;DAOPackage&quot;));&#10;&#10;import #(entityQualifiedName);&#10;import org.apache.ibatis.annotations.Param;&#10;import org.springframework.data.domain.Pageable;&#10;import java.util.List;&#10;&#10;/**&#10; * (#(tableInfo.name))表数据库访问层&#10; *&#10; * @author makejava&#10; * @since 2022-09-07 15:32:42&#10; */&#10;public interface #(te.getStr(&quot;DAOFileName&quot;)) {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param #(primaryKeyCamelName) 主键&#10;     * @return 实例对象&#10;     */&#10;    #(entityName) queryById(#(primaryKeyShortType) #(id));&#10;&#10;    /**&#10;     * 查询指定行数据&#10;     *&#10;     * @param #(entityLowerName) 查询条件&#10;     * @param pageable         分页对象&#10;     * @return 对象列表&#10;     */&#10;    List&lt;#(entityName)&gt; queryAllByLimit(#(entityName) #(entityLowerName), @Param(&quot;pageable&quot;) Pageable pageable);&#10;&#10;    /**&#10;     * 统计总行数&#10;     *&#10;     * @param #(entityLowerName) 查询条件&#10;     * @return 总行数&#10;     */&#10;    long count(#(entityName) #(entityLowerName));&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param #(entityLowerName) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int insert(#(entityName) #(entityLowerName));&#10;&#10;    /**&#10;     * 批量新增数据（MyBatis原生foreach方法）&#10;     *&#10;     * @param entities List&lt;#(entityName)&gt; 实例对象列表&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(@Param(&quot;entities&quot;) List&lt;#(entityName)&gt; entities);&#10;&#10;    /**&#10;     * 批量新增或按主键更新数据（MyBatis原生foreach方法）&#10;     *&#10;     * @param entities List&lt;#(entityName)&gt; 实例对象列表&#10;     * @return 影响行数&#10;     * @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参&#10;     */&#10;    int insertOrUpdateBatch(@Param(&quot;entities&quot;) List&lt;#(entityName)&gt; entities);&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param #(entityLowerName) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int update(#(entityName) #(entityLowerName));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param #(id) 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById(#(primaryKeyShortType) #(id));&#10;}&#10;" />
                <option name="id" value="3" />
                <option name="name" value="DAO" />
                <option name="suffix" value=".java" />
                <option name="template" value="### 生成Dao层代码&#10;#set(entityName = te.getStr(&quot;DOFileName&quot;))&#10;#set(entityLowerName = StrUtil.lowerFirst(entityName))&#10;#set(id = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;### 引用包路径名称&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;### 主键相关&#10;#set(primaryKeyCamelName = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(primaryKeyShortType = te.getStr(&quot;primaryKeyShortType&quot;))&#10;package #(te.getStr(&quot;DAOPackage&quot;));&#10;&#10;import #(entityQualifiedName);&#10;import org.apache.ibatis.annotations.Param;&#10;import org.springframework.data.domain.Pageable;&#10;import java.util.List;&#10;&#10;/**&#10; * (#(tableInfo.name))表数据库访问层&#10; *&#10; * @author makejava&#10; * @since 2022-09-07 15:32:42&#10; */&#10;public interface #(te.getStr(&quot;DAOFileName&quot;)) {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param #(primaryKeyCamelName) 主键&#10;     * @return 实例对象&#10;     */&#10;    #(entityName) queryById(#(primaryKeyShortType) #(id));&#10;&#10;    /**&#10;     * 查询指定行数据&#10;     *&#10;     * @param #(entityLowerName) 查询条件&#10;     * @param pageable         分页对象&#10;     * @return 对象列表&#10;     */&#10;    List&lt;#(entityName)&gt; queryAllByLimit(#(entityName) #(entityLowerName), @Param(&quot;pageable&quot;) Pageable pageable);&#10;&#10;    /**&#10;     * 统计总行数&#10;     *&#10;     * @param #(entityLowerName) 查询条件&#10;     * @return 总行数&#10;     */&#10;    long count(#(entityName) #(entityLowerName));&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param #(entityLowerName) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int insert(#(entityName) #(entityLowerName));&#10;&#10;    /**&#10;     * 批量新增数据（MyBatis原生foreach方法）&#10;     *&#10;     * @param entities List&lt;#(entityName)&gt; 实例对象列表&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(@Param(&quot;entities&quot;) List&lt;#(entityName)&gt; entities);&#10;&#10;    /**&#10;     * 批量新增或按主键更新数据（MyBatis原生foreach方法）&#10;     *&#10;     * @param entities List&lt;#(entityName)&gt; 实例对象列表&#10;     * @return 影响行数&#10;     * @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参&#10;     */&#10;    int insertOrUpdateBatch(@Param(&quot;entities&quot;) List&lt;#(entityName)&gt; entities);&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param #(entityLowerName) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int update(#(entityName) #(entityLowerName));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param #(id) 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById(#(primaryKeyShortType) #(id));&#10;}&#10;" />
              </DBTemplateConf>
              <DBTemplateConf>
                <option name="defaultModuleName" value="service" />
                <option name="defaultTemplate" value="### 生成Service&#10;#set(camelNameUpper = te.getStr(&quot;upperFirstCamelName&quot;))&#10;#set(serviceName = te.getStr(&quot;serviceFileName&quot;))&#10;#set(entityName = te.getStr(&quot;DOFileName&quot;))&#10;#set(lowerEntityName = StrUtil.lowerFirst(entityName))&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;### 主键相关&#10;#set(primaryKeyCamel = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(primaryKeyShortType = te.getStr(&quot;primaryKeyShortType&quot;))&#10;#set(primaryKeyUpperFirstCamelName = te.getStr(&quot;primaryKeyUpperFirstCamelName&quot;))&#10;package #(te.getStr(&quot;servicePackage&quot;));&#10;&#10;import #(entityQualifiedName);&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;&#10;/**&#10; * (#(camelNameUpper))表服务接口&#10; *&#10; * @author makejava&#10; */&#10;public interface #(serviceName) {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param #(primaryKeyCamel) 主键&#10;     * @return 实例对象&#10;     */&#10;    #(entityName) queryById(#(primaryKeyShortType) #(primaryKeyCamel));&#10;&#10;    /**&#10;     * 分页查询&#10;     *&#10;     * @param #(lowerEntityName) 筛选条件&#10;     * @param pageRequest  分页对象&#10;     * @return 查询结果&#10;     */&#10;    Page&lt;#(entityName)&gt; queryByPage(#(entityName) #(lowerEntityName), PageRequest pageRequest);&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param #(lowerEntityName) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    #(entityName) insert(#(entityName) #(lowerEntityName));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param #(lowerEntityName) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    #(entityName) update(#(entityName) #(lowerEntityName));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param #(primaryKeyCamel) 主键&#10;     * @return 是否成功&#10;     */&#10;    boolean deleteById(#(primaryKeyShortType) #(primaryKeyCamel));&#10;&#10;}&#10;" />
                <option name="id" value="4" />
                <option name="name" value="service" />
                <option name="suffix" value=".java" />
                <option name="template" value="### 生成Service&#10;#set(camelNameUpper = te.getStr(&quot;upperFirstCamelName&quot;))&#10;#set(serviceName = te.getStr(&quot;serviceFileName&quot;))&#10;#set(entityName = te.getStr(&quot;DOFileName&quot;))&#10;#set(lowerEntityName = StrUtil.lowerFirst(entityName))&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;### 主键相关&#10;#set(primaryKeyCamel = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(primaryKeyShortType = te.getStr(&quot;primaryKeyShortType&quot;))&#10;#set(primaryKeyUpperFirstCamelName = te.getStr(&quot;primaryKeyUpperFirstCamelName&quot;))&#10;package #(te.getStr(&quot;servicePackage&quot;));&#10;&#10;import #(entityQualifiedName);&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;&#10;/**&#10; * (#(camelNameUpper))表服务接口&#10; *&#10; * @author makejava&#10; */&#10;public interface #(serviceName) {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param #(primaryKeyCamel) 主键&#10;     * @return 实例对象&#10;     */&#10;    #(entityName) queryById(#(primaryKeyShortType) #(primaryKeyCamel));&#10;&#10;    /**&#10;     * 分页查询&#10;     *&#10;     * @param #(lowerEntityName) 筛选条件&#10;     * @param pageRequest  分页对象&#10;     * @return 查询结果&#10;     */&#10;    Page&lt;#(entityName)&gt; queryByPage(#(entityName) #(lowerEntityName), PageRequest pageRequest);&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param #(lowerEntityName) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    #(entityName) insert(#(entityName) #(lowerEntityName));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param #(lowerEntityName) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    #(entityName) update(#(entityName) #(lowerEntityName));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param #(primaryKeyCamel) 主键&#10;     * @return 是否成功&#10;     */&#10;    boolean deleteById(#(primaryKeyShortType) #(primaryKeyCamel));&#10;&#10;}&#10;" />
              </DBTemplateConf>
              <DBTemplateConf>
                <option name="defaultModuleName" value="service" />
                <option name="defaultTemplate" value="### 生成Impl&#10;#set(primaryKeyCamel = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(entityName = te.getStr(&quot;DOFileName&quot;))&#10;#set(lowerFirstEntityName = StrUtil.lowerFirst(entityName))&#10;#set(daoName = te.getStr(&quot;DAOFileName&quot;))&#10;#set(lowerFirstDaoName = StrUtil.lowerFirst(daoName))&#10;#set(serviceName = te.getStr(&quot;serviceFileName&quot;))&#10;### 引用类名称&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;#set(daoQualifiedName = te.getStr(&quot;DAOPackageQN&quot;))&#10;#set(serviceQualifiedName = te.getStr(&quot;servicePackageQN&quot;))&#10;### 表主键相关&#10;#set(primaryKeyShortType = te.getStr(&quot;primaryKeyShortType&quot;))&#10;#set(primaryKeyUpperFirstCamelName = te.getStr(&quot;primaryKeyUpperFirstCamelName&quot;))&#10;package #(te.getStr(&quot;implPackage&quot;));&#10;&#10;import #(entityQualifiedName);&#10;import #(daoQualifiedName);&#10;import #(serviceQualifiedName);&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageImpl;&#10;import org.springframework.data.domain.PageRequest;&#10;&#10;&#10;/**&#10; * (#(te.getStr(&quot;upperFirstCamelName&quot;)))表服务实现类&#10; *&#10; * @author makejava&#10; * @since 2022-10-24 15:14:30&#10; */&#10;@Service(&quot;#(StrUtil.lowerFirst(serviceName))&quot;)&#10;public class #(te.getStr(&quot;implFileName&quot;)) implements #(serviceName) {&#10;    @Autowired&#10;    private #(daoName) #(lowerFirstDaoName);&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param #(primaryKeyCamel) 主键&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public #(entityName) queryById(#(primaryKeyShortType) #(primaryKeyCamel)) {&#10;        return this.#(lowerFirstDaoName).queryById(#(primaryKeyCamel));&#10;    }&#10;&#10;    /**&#10;     * 分页查询&#10;     *&#10;     * @param #(lowerFirstEntityName) 筛选条件&#10;     * @param pageRequest      分页对象&#10;     * @return 查询结果&#10;     */&#10;    @Override&#10;    public Page&lt;#(entityName)&gt; queryByPage(#(entityName) #(lowerFirstEntityName), PageRequest pageRequest) {&#10;        long total = this.#(lowerFirstDaoName).count(#(lowerFirstEntityName));&#10;        return new PageImpl&lt;&gt;(this.#(lowerFirstDaoName).queryAllByLimit(#(lowerFirstEntityName), pageRequest), pageRequest, total);&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param #(lowerFirstEntityName) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public #(entityName) insert(#(entityName) #(lowerFirstEntityName)) {&#10;        this.#(lowerFirstDaoName).insert(#(lowerFirstEntityName));&#10;        return #(lowerFirstEntityName);&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param #(lowerFirstEntityName) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public #(entityName) update(#(entityName) #(lowerFirstEntityName)) {&#10;        this.#(lowerFirstDaoName).update(#(lowerFirstEntityName));&#10;        return this.queryById(#(lowerFirstEntityName).get#(primaryKeyUpperFirstCamelName)());&#10;    }&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param #(primaryKeyCamel) 主键&#10;     * @return 是否成功&#10;     */&#10;    @Override&#10;    public boolean deleteById(#(primaryKeyShortType) #(primaryKeyCamel)) {&#10;        return this.#(lowerFirstDaoName).deleteById(#(primaryKeyCamel)) &gt; 0;&#10;    }&#10;}&#10;" />
                <option name="id" value="5" />
                <option name="name" value="impl" />
                <option name="suffix" value=".java" />
                <option name="template" value="### 生成Impl&#10;#set(primaryKeyCamel = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(entityName = te.getStr(&quot;DOFileName&quot;))&#10;#set(lowerFirstEntityName = StrUtil.lowerFirst(entityName))&#10;#set(daoName = te.getStr(&quot;DAOFileName&quot;))&#10;#set(lowerFirstDaoName = StrUtil.lowerFirst(daoName))&#10;#set(serviceName = te.getStr(&quot;serviceFileName&quot;))&#10;### 引用类名称&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;#set(daoQualifiedName = te.getStr(&quot;DAOPackageQN&quot;))&#10;#set(serviceQualifiedName = te.getStr(&quot;servicePackageQN&quot;))&#10;### 表主键相关&#10;#set(primaryKeyShortType = te.getStr(&quot;primaryKeyShortType&quot;))&#10;#set(primaryKeyUpperFirstCamelName = te.getStr(&quot;primaryKeyUpperFirstCamelName&quot;))&#10;package #(te.getStr(&quot;implPackage&quot;));&#10;&#10;import #(entityQualifiedName);&#10;import #(daoQualifiedName);&#10;import #(serviceQualifiedName);&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageImpl;&#10;import org.springframework.data.domain.PageRequest;&#10;&#10;&#10;/**&#10; * (#(te.getStr(&quot;upperFirstCamelName&quot;)))表服务实现类&#10; *&#10; * @author makejava&#10; * @since 2022-10-24 15:14:30&#10; */&#10;@Service(&quot;#(StrUtil.lowerFirst(serviceName))&quot;)&#10;public class #(te.getStr(&quot;implFileName&quot;)) implements #(serviceName) {&#10;    @Autowired&#10;    private #(daoName) #(lowerFirstDaoName);&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param #(primaryKeyCamel) 主键&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public #(entityName) queryById(#(primaryKeyShortType) #(primaryKeyCamel)) {&#10;        return this.#(lowerFirstDaoName).queryById(#(primaryKeyCamel));&#10;    }&#10;&#10;    /**&#10;     * 分页查询&#10;     *&#10;     * @param #(lowerFirstEntityName) 筛选条件&#10;     * @param pageRequest      分页对象&#10;     * @return 查询结果&#10;     */&#10;    @Override&#10;    public Page&lt;#(entityName)&gt; queryByPage(#(entityName) #(lowerFirstEntityName), PageRequest pageRequest) {&#10;        long total = this.#(lowerFirstDaoName).count(#(lowerFirstEntityName));&#10;        return new PageImpl&lt;&gt;(this.#(lowerFirstDaoName).queryAllByLimit(#(lowerFirstEntityName), pageRequest), pageRequest, total);&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param #(lowerFirstEntityName) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public #(entityName) insert(#(entityName) #(lowerFirstEntityName)) {&#10;        this.#(lowerFirstDaoName).insert(#(lowerFirstEntityName));&#10;        return #(lowerFirstEntityName);&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param #(lowerFirstEntityName) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public #(entityName) update(#(entityName) #(lowerFirstEntityName)) {&#10;        this.#(lowerFirstDaoName).update(#(lowerFirstEntityName));&#10;        return this.queryById(#(lowerFirstEntityName).get#(primaryKeyUpperFirstCamelName)());&#10;    }&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param #(primaryKeyCamel) 主键&#10;     * @return 是否成功&#10;     */&#10;    @Override&#10;    public boolean deleteById(#(primaryKeyShortType) #(primaryKeyCamel)) {&#10;        return this.#(lowerFirstDaoName).deleteById(#(primaryKeyCamel)) &gt; 0;&#10;    }&#10;}&#10;" />
              </DBTemplateConf>
              <DBTemplateConf>
                <option name="defaultModuleName" value="facade" />
                <option name="defaultTemplate" value="### Controller生成&#10;#set(camelName = te.getStr(&quot;camelName&quot;))&#10;#set(camelNameUpper = te.getStr(&quot;upperFirstCamelName&quot;))&#10;#set(entityName = te.getStr(&quot;DOFileName&quot;))&#10;#set(lowerEntityName = StrUtil.lowerFirst(entityName))&#10;#set(serviceName = te.getStr(&quot;serviceFileName&quot;))&#10;#set(lowerServiceName = StrUtil.lowerFirst(serviceName))&#10;### 主键相关&#10;#set(primaryKeyCamel = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(primaryKeyShortType = te.getStr(&quot;primaryKeyShortType&quot;))&#10;&#10;### 引用类名称&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;#set(serviceQualifiedName = te.getStr(&quot;servicePackageQN&quot;))&#10;###&#10;package #(te.getStr(&quot;controllerPackage&quot;));&#10;&#10;import #(entityQualifiedName);&#10;import #(serviceQualifiedName);&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;/**&#10; * (#(camelNameUpper))表控制层&#10; *&#10; * @author makejava&#10; */&#10;@RestController&#10;@RequestMapping(&quot;#(camelName)&quot;)&#10;public class #(te.getStr(&quot;controllerFileName&quot;)) {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Autowired&#10;    private #(serviceName) #(lowerServiceName);&#10;&#10;    /**&#10;     * 分页查询&#10;     *&#10;     * @param #(lowerEntityName) 筛选条件&#10;     * @param pageRequest  分页对象&#10;     * @return 查询结果&#10;     */&#10;    @GetMapping&#10;    public ResponseEntity&lt;Page&lt;#(entityName)&gt;&gt; queryByPage(#(entityName) #(lowerEntityName), PageRequest pageRequest) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).queryByPage(#(lowerEntityName), pageRequest));&#10;    }&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;{id}&quot;)&#10;    public ResponseEntity&lt;#(entityName)&gt; queryById(@PathVariable(&quot;id&quot;) #(primaryKeyShortType) id) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).queryById(id));&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param #(lowerEntityName) 实体&#10;     * @return 新增结果&#10;     */&#10;    @PostMapping&#10;    public ResponseEntity&lt;#(entityName)&gt; add(#(entityName) #(lowerEntityName)) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).insert(#(lowerEntityName)));&#10;    }&#10;&#10;    /**&#10;     * 编辑数据&#10;     *&#10;     * @param #(lowerEntityName) 实体&#10;     * @return 编辑结果&#10;     */&#10;    @PutMapping&#10;    public ResponseEntity&lt;#(entityName)&gt; edit(#(entityName) #(lowerEntityName)) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).update(#(lowerEntityName)));&#10;    }&#10;&#10;    /**&#10;     * 删除数据&#10;     *&#10;     * @param id 主键&#10;     * @return 删除是否成功&#10;     */&#10;    @DeleteMapping&#10;    public ResponseEntity&lt;Boolean&gt; deleteById(#(primaryKeyShortType) id) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).deleteById(id));&#10;    }&#10;&#10;}&#10;&#10;" />
                <option name="id" value="6" />
                <option name="name" value="controller" />
                <option name="suffix" value=".java" />
                <option name="template" value="### Controller生成&#10;#set(camelName = te.getStr(&quot;camelName&quot;))&#10;#set(camelNameUpper = te.getStr(&quot;upperFirstCamelName&quot;))&#10;#set(entityName = te.getStr(&quot;DOFileName&quot;))&#10;#set(lowerEntityName = StrUtil.lowerFirst(entityName))&#10;#set(serviceName = te.getStr(&quot;serviceFileName&quot;))&#10;#set(lowerServiceName = StrUtil.lowerFirst(serviceName))&#10;### 主键相关&#10;#set(primaryKeyCamel = te.getStr(&quot;primaryKeyCamelName&quot;))&#10;#set(primaryKeyShortType = te.getStr(&quot;primaryKeyShortType&quot;))&#10;&#10;### 引用类名称&#10;#set(entityQualifiedName = te.getStr(&quot;DOPackageQN&quot;))&#10;#set(serviceQualifiedName = te.getStr(&quot;servicePackageQN&quot;))&#10;###&#10;package #(te.getStr(&quot;controllerPackage&quot;));&#10;&#10;import #(entityQualifiedName);&#10;import #(serviceQualifiedName);&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;/**&#10; * (#(camelNameUpper))表控制层&#10; *&#10; * @author makejava&#10; */&#10;@RestController&#10;@RequestMapping(&quot;#(camelName)&quot;)&#10;public class #(te.getStr(&quot;controllerFileName&quot;)) {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Autowired&#10;    private #(serviceName) #(lowerServiceName);&#10;&#10;    /**&#10;     * 分页查询&#10;     *&#10;     * @param #(lowerEntityName) 筛选条件&#10;     * @param pageRequest  分页对象&#10;     * @return 查询结果&#10;     */&#10;    @GetMapping&#10;    public ResponseEntity&lt;Page&lt;#(entityName)&gt;&gt; queryByPage(#(entityName) #(lowerEntityName), PageRequest pageRequest) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).queryByPage(#(lowerEntityName), pageRequest));&#10;    }&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;{id}&quot;)&#10;    public ResponseEntity&lt;#(entityName)&gt; queryById(@PathVariable(&quot;id&quot;) #(primaryKeyShortType) id) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).queryById(id));&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param #(lowerEntityName) 实体&#10;     * @return 新增结果&#10;     */&#10;    @PostMapping&#10;    public ResponseEntity&lt;#(entityName)&gt; add(#(entityName) #(lowerEntityName)) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).insert(#(lowerEntityName)));&#10;    }&#10;&#10;    /**&#10;     * 编辑数据&#10;     *&#10;     * @param #(lowerEntityName) 实体&#10;     * @return 编辑结果&#10;     */&#10;    @PutMapping&#10;    public ResponseEntity&lt;#(entityName)&gt; edit(#(entityName) #(lowerEntityName)) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).update(#(lowerEntityName)));&#10;    }&#10;&#10;    /**&#10;     * 删除数据&#10;     *&#10;     * @param id 主键&#10;     * @return 删除是否成功&#10;     */&#10;    @DeleteMapping&#10;    public ResponseEntity&lt;Boolean&gt; deleteById(#(primaryKeyShortType) id) {&#10;        return ResponseEntity.ok(this.#(lowerServiceName).deleteById(id));&#10;    }&#10;&#10;}&#10;&#10;" />
              </DBTemplateConf>
            </list>
          </option>
          <option name="id" value="0" />
          <option name="name" value="mybatis" />
        </DBTemplateGroup>
      </list>
    </option>
    <option name="typeMapperList">
      <list>
        <TypeMapper>
          <option name="columnType" value="(?i)varchar(\(\d+\))?" />
          <option name="javaType" value="java.lang.String" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="(?i)char(\(\d+\))?" />
          <option name="javaType" value="java.lang.String" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="(?i)(tiny|medium|long)*text" />
          <option name="javaType" value="java.lang.String" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="(?i)decimal(\(\d+,\d+\))?" />
          <option name="javaType" value="java.lang.Double" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="(?i)(tiny|small|medium)*int(\(\d+\))?" />
          <option name="javaType" value="java.lang.Integer" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="bigint" />
          <option name="javaType" value="java.lang.Long" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="time" />
          <option name="javaType" value="java.util.Date" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="boolean" />
          <option name="javaType" value="java.util.Date" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="int8" />
          <option name="javaType" value="java.lang.Long" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="int4" />
          <option name="javaType" value="java.lang.Integer" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="integer" />
          <option name="javaType" value="java.lang.Integer" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="date" />
          <option name="javaType" value="java.util.Date" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="datetime" />
          <option name="javaType" value="java.util.Date" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
        <TypeMapper>
          <option name="columnType" value="timestamp" />
          <option name="javaType" value="java.util.Date" />
          <option name="matchType" value="ORDINARY" />
        </TypeMapper>
      </list>
    </option>
  </component>
</application>